const cron = require('node-cron');
const User = require('../schema/user.schema');
const Job = require('../schema/jobs.schema');
const JobNotification = require('../schema/jobNotification.schema');
const { sendMail } = require('./mailer');

const sendJobNotificationsCron = () => {
  cron.schedule('* * * * *', async () => {
    try {
      console.log('üîî B·∫Øt ƒë·∫ßu ki·ªÉm tra job ph√π h·ª£p ƒë·ªÉ g·ª≠i mail...');

      const users = await User.find({
        isDeleted: false,
        'role.name': 'NORMAL USER',
      });

      const jobs = await Job.find({
        isActive: true,
        endDate: { $gte: new Date() },
        isDeleted: false,
      });

      for (const user of users) {
        try {
          if (!user.email) {
            console.warn(`‚ö†Ô∏è User ${user._id} kh√¥ng c√≥ email, b·ªè qua`);
            continue;
          }

          const jobNotification = await JobNotification.findOne({ userId: user._id });

          if (!jobNotification || !Array.isArray(jobNotification.skills) || jobNotification.skills.length === 0) {
            console.log(`‚ö†Ô∏è User ${user._id} kh√¥ng c√≥ skills trong JobNotification, b·ªè qua`);
            continue;
          }

          const userSkills = jobNotification.skills;

          const matchedJobs = jobs.filter(job =>
            job.skill && job.skill.some(skill => userSkills.includes(skill))
          );

          if (matchedJobs.length === 0) {
            console.log(`‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y job ph√π h·ª£p cho user ${user._id}, b·ªè qua.`);
            continue;
          }

          // Chu·∫©n b·ªã d·ªØ li·ªáu cho email t·ªïng h·ª£p
          const jobListHtml = matchedJobs.map(job => `
            <div style="
                border: 1px solid #e0e0e0;
                border-radius: 8px;
                padding: 15px;
                margin-bottom: 20px;
                background-color: #ffffff;
                box-shadow: 0 2px 4px rgba(0,0,0,0.05);
            ">
                <h3 style="color: #0056b3; margin-top: 0; margin-bottom: 10px;">${job.name}</h3>
                <p style="margin: 5px 0;"><strong>C√¥ng ty:</strong> ${job.companyId?.name || 'C√¥ng ty'}</p>
                <p style="margin: 5px 0;"><strong>ƒê·ªãa ƒëi·ªÉm:</strong> ${job.location}</p>
                <p style="margin: 5px 0;"><strong>M·ª©c l∆∞∆°ng:</strong> ${job.salary}</p>
                <p style="margin: 5px 0;"><strong>Ng√†y k·∫øt th√∫c:</strong> ${job.endDate?.toLocaleDateString() || ''}</p>
                <p style="margin: 5px 0; font-size: 0.9em; color: #555;">${job.description.substring(0, 150)}...</p>
                <a href="[LINK_TO_JOB_DETAIL/${job._id}]" style="
                    display: inline-block;
                    background-color: #007bff;
                    color: #ffffff;
                    padding: 8px 15px;
                    border-radius: 5px;
                    text-decoration: none;
                    margin-top: 10px;
                    font-size: 0.9em;
                ">Xem chi ti·∫øt</a>
            </div>
        `).join('');

          console.log(`üì§ G·ª≠i mail t·ªïng h·ª£p c√°c job t·ªõi user "${user.email}"`);

          await sendMail(
            user.email,
            `C∆° h·ªôi vi·ªác l√†m ph√π h·ª£p d√†nh cho b·∫°n (${matchedJobs.length} vi·ªác l√†m)`,
            'jobNotificationAggregate', // B·∫°n c√≥ th·ªÉ mu·ªën m·ªôt template m·ªõi cho email t·ªïng h·ª£p
            {
              userName: user.name || '·ª®ng vi√™n',
              emailContent: jobListHtml // Truy·ªÅn n·ªôi dung HTML ƒë√£ t·∫°o
            }
          );

          console.log(`‚úÖ ƒê√£ g·ª≠i mail t·ªïng h·ª£p ƒë·∫øn user "${user.email}" v·ªõi ${matchedJobs.length} job.`);

        } catch (userErr) {
          console.error(`‚ùå L·ªói khi x·ª≠ l√Ω user ${user._id}:`, userErr);
        }
      }

      console.log('‚úÖ Ho√†n th√†nh g·ª≠i mail job ph√π h·ª£p cho user.');
    } catch (error) {
      console.error('‚ùå L·ªói trong cron job g·ª≠i mail:', error);
    }
  });
};

module.exports = sendJobNotificationsCron;