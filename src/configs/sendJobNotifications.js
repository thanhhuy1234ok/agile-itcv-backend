const cron = require('node-cron');
const User = require('../schema/user.schema');
const Job = require('../schema/jobs.schema');
const JobNotification = require('../schema/jobNotification.schema');
const { formatDate } = require('../utils/formater.dayjs');
const { sendMail } = require('./mailer');

const sendJobNotificationsCron = () => {
  cron.schedule('* * * * *', async () => {
    try {
      console.log('üîî B·∫Øt ƒë·∫ßu ki·ªÉm tra job ph√π h·ª£p ƒë·ªÉ g·ª≠i mail...');

      const users = await User.find({
        isDeleted: false,
        'role.name': 'NORMAL USER',
      });

      const jobs = await Job.find({
        isActive: true,
        endDate: { $gte: new Date() },
        isDeleted: false,
      });

      for (const user of users) {
        try {
          if (!user.email) {
            console.warn(`‚ö†Ô∏è User ${user._id} kh√¥ng c√≥ email, b·ªè qua`);
            continue;
          }

          const jobNotification = await JobNotification.findOne({ userId: user._id });

          if (!jobNotification || jobNotification.emailNotificationsEnabled === false) {
            console.log(`‚ö†Ô∏è User ${user._id} ƒë√£ t·∫Øt g·ª≠i mail, b·ªè qua.`);
            continue;
          }

          if (!Array.isArray(jobNotification.skills) || jobNotification.skills.length === 0) {
            console.log(`‚ö†Ô∏è User ${user._id} kh√¥ng c√≥ skills trong JobNotification, b·ªè qua`);
            continue;
          }

          const userSkills = jobNotification.skills;

          const matchedJobs = jobs.filter(job =>
            job.skill && job.skill.some(skill => userSkills.includes(skill))
          );

          if (matchedJobs.length === 0) {
            console.log(`‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y job ph√π h·ª£p cho user ${user._id}, b·ªè qua.`);
            continue;
          }

          const formattedJobs = matchedJobs.map(job => ({
            _id: job._id,
            name: job.name,
            location: job.location,
            salary: job.salary,
            description: job.description?.substring(0, 150) + '...',
            endDate: formatDate(job.endDate) || '',
            companyName: job.companyId?.name || 'C√¥ng ty',
          }));

          console.log(`üì§ G·ª≠i mail t·ªõi user "${user.email}" v·ªõi ${formattedJobs.length} job`);

          await sendMail(
            user.email,
            `C∆° h·ªôi vi·ªác l√†m ph√π h·ª£p d√†nh cho b·∫°n (${formattedJobs.length} vi·ªác l√†m)`,
            'jobNotificationAggregate',
            {
              userName: user.name || '·ª®ng vi√™n',
              jobs: formattedJobs,
            }
          );

          console.log(`‚úÖ ƒê√£ g·ª≠i mail ƒë·∫øn user "${user.email}"`);
        } catch (userErr) {
          console.error(`‚ùå L·ªói khi x·ª≠ l√Ω user ${user._id}:`, userErr);
        }
      }

      console.log('‚úÖ Ho√†n th√†nh g·ª≠i mail job ph√π h·ª£p cho user.');
    } catch (error) {
      console.error('‚ùå L·ªói trong cron job g·ª≠i mail:', error);
    }
  });
};

module.exports = sendJobNotificationsCron;
